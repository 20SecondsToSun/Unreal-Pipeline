def slackNotify(message, color) {
    slackSend color: "${color}", message: "${message}"
}

def getcolorByBuildStatus(buildStatus){
    def color = 'danger'
    if (buildStatus == 'SUCCESS') {
        color = 'good'
    } else if (buildStatus == 'UNSTABLE') {
        color = 'warning'
    }
    return color
}

pipeline {
    agent {
        node {
          label "UE_TESTS"
          customWorkspace "${params.DIRECTORY}"
        }
    }
    environment {
        ARCHIVE_DIR = "${params.PACKAGE_PATH}\\${env.JOB_NAME}\\${env.BUILD_NUMBER}"
        PROJECT_PATH = "${params.DIRECTORY}\\${params.UE_PROJECT_NAME}.uproject"
    }
    stages {
        stage('Git') {
            environment {
              SLACK_MESSAGE = "${env.JOB_NAME} - #${env.BUILD_NUMBER} Started"
            }
            steps {
                wrap([$class: 'BuildUser']) {
                    slackNotify("${env.JOB_NAME} - #${env.BUILD_NUMBER} Started by user ${env.BUILD_USER}", 'good')
                }
                checkout([$class: 'GitSCM', branches: [[name: "${params.GIT_BRANCH}"]], userRemoteConfigs: [[credentialsId: "${params.GIT_CREDENTIAL}", url: "${params.GIT_URL}"]]])
            }
        }
        stage('Build') {
            environment {
                ARCHIVE_DIR = "${params.PACKAGE_PATH}\\${env.JOB_NAME}\\${env.BUILD_NUMBER}"
                BAT_PATH = "${params.UE_PATH}\\Engine\\Build\\BatchFiles\\RunUAT.bat"
            }
            steps {
                bat """
                    "$BAT_PATH" BuildCookRun -project="$PROJECT_PATH" -platform=${params.PLATFORM} -archivedirectory="$ARCHIVE_DIR" -ClientConfig=${params.GAME_CONFIG} -ServerConfig=${params.GAME_CONFIG} -server ${params.BUILD_ARGS}
                """
            }
        }
        stage('Tests') {
           environment {
                LOG_PATH = "${params.DIRECTORY}\\TestResults\\RunTests.log"
                EDITOR_PATH = "${params.UE_PATH}\\Engine\\Binaries\\Win64\\UE4Editor.exe"
                TEST_REPORT_PATH = "${params.DIRECTORY}\\TestResults"
                CONVERTER_PATH = "${params.DIRECTORY}\\Scripts\\ue_to_junit.py"
                UE_TESTS_PATH = "${params.DIRECTORY}\\TestResults\\index.json"
                JUNIT_TESTS_PATH = "${params.DIRECTORY}\\TestResults\\unreal_unittests.xml"
            }
            steps {
                bat """
                    "$EDITOR_PATH" "$PROJECT_PATH" -ExecCmds="Automation RunTests ${params.TEST_NAMES}" -testexit="Automation Test Queue Empty" -log="$LOG_PATH" -ReportOutputPath="$TEST_REPORT_PATH" -nopause
                    python "${CONVERTER_PATH}" --json="${UE_TESTS_PATH}" --out="${JUNIT_TESTS_PATH}"
                """
            }
        }
    }
    post {
        success {
            junit 'TestResults\\*.xml'
            bat """
                ren "$ARCHIVE_DIR\\WindowsNoEditor" Client
                ren "$ARCHIVE_DIR\\WindowsServer" Server
                xcopy "${params.DIRECTORY}\\Scripts\\Run" "$ARCHIVE_DIR" /s /e 
            """
        }
        always {
            wrap([$class: 'BuildUser']) {
                slackNotify("${env.JOB_NAME} - #${env.BUILD_NUMBER} ${currentBuild.currentResult}", getcolorByBuildStatus("${currentBuild.currentResult}"))
    		}
        }
    }
}

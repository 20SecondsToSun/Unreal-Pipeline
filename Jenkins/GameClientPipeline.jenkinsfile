def slack

pipeline {
    agent {
        node {
          label ""
          customWorkspace "${params.DIRECTORY}"
        }
    }
    environment {
        ARCHIVE_DIR = "${params.PACKAGE_PATH}\\${env.JOB_NAME}\\${env.BUILD_NUMBER}"
    }
    stages {
        stage('Init') {
            steps {
                script{
                    slack = load '${params.DIRECTORY}\\slack-helper.groovy'
                }
            }
        }
        stage('Clean')
        {
            when {
                expression { params.CLEAN == true }
            }
            steps {
                bat """
                    git clean -fdx
                """
            }
        }
        stage('Git') {
            steps {
                script{
                    wrap([$class: 'BuildUser']) {
                        slack.notify("${env.JOB_NAME} - #${env.BUILD_NUMBER} Started by user ${env.BUILD_USER}", 'good')
                    }
                }
                checkout([$class: 'GitSCM', branches: [[name: "${params.GIT_BRANCH}"]], userRemoteConfigs: [[credentialsId: "${params.GIT_CREDENTIAL}", url: "${params.GIT_URL}"]]])
            }
        }
        stage('Build') {
            environment {
                PROJECT_PATH = "${params.DIRECTORY}\\${params.UE_PROJECT_NAME}.uproject"
                BAT_PATH = "${params.UE_PATH}\\Engine\\Build\\BatchFiles\\RunUAT.bat"
            }
            steps {
                bat """
                    "$BAT_PATH" BuildCookRun -project="$PROJECT_PATH" -platform=${params.PLATFORM} -archivedirectory="$ARCHIVE_DIR" -ClientConfig=${params.CLIENT_CONFIG} ${params.BUILD_ARGS}
                """
            }
        }
    }
    post {
        success {
            bat """
                ren "$ARCHIVE_DIR\\WindowsNoEditor" Client
            """
        }  
        always {  
            script{         
                wrap([$class: 'BuildUser']) {
                    slack.notify("${env.JOB_NAME} - #${env.BUILD_NUMBER} ${currentBuild.currentResult}", slack.getcolorByBuildStatus("${currentBuild.currentResult}"))
                }
            }
        }
    }
}
